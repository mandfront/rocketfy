{"ast":null,"code":"var _jsxFileName = \"/Users/Karine/rocketfy/src/components/Card/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { Container, Label } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Card(_ref) {\n  _s();\n\n  let {\n    data,\n    index\n  } = _ref;\n  const ref = useRef();\n  const [{\n    isDragging\n  }, dragRef] = useDrag({\n    item: {\n      type: 'CARD',\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [, dropRef] = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n    }\n\n  });\n  dragRef(dropRef(ref));\n  return /*#__PURE__*/_jsxDEV(Container, {\n    ref: dragRef,\n    isDragging: isDragging,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: data.labels.map(label => /*#__PURE__*/_jsxDEV(Label, {\n        color: label\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data.user && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.user,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Card, \"0XMzTTLUe4DLIfWIElWHFrsYERQ=\", false, function () {\n  return [useDrag, useDrop];\n});\n\n_c = Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/Karine/rocketfy/src/components/Card/index.js"],"names":["React","useRef","useDrag","useDrop","Container","Label","Card","data","index","ref","isDragging","dragRef","item","type","collect","monitor","dropRef","accept","hover","draggedIndex","targetIndex","targetSize","current","getBoundingClientRect","labels","map","label","content","user"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC;;AAEA,eAAe,SAASC,IAAT,OAA+B;AAAA;;AAAA,MAAjB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAiB;AAC5C,QAAMC,GAAG,GAAGR,MAAM,EAAlB;AAEA,QAAM,CAAC;AAAES,IAAAA;AAAF,GAAD,EAAiBC,OAAjB,IAA4BT,OAAO,CAAC;AACxCU,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBL,MAAAA;AAAhB,KADkC;AAExCM,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACnBL,MAAAA,UAAU,EAAEK,OAAO,CAACL,UAAR;AADO,KAAL;AAFwB,GAAD,CAAzC;AAOA,QAAM,GAAGM,OAAH,IAAcb,OAAO,CAAC;AAC1Bc,IAAAA,MAAM,EAAE,MADkB;;AAE1BC,IAAAA,KAAK,CAACN,IAAD,EAAOG,OAAP,EAAgB;AACnB,YAAMI,YAAY,GAAGP,IAAI,CAACJ,KAA1B;AACA,YAAMY,WAAW,GAAGZ,KAApB;;AAEA,UAAIW,YAAY,KAAKC,WAArB,EAAkC;AAChC;AACD;;AAED,YAAMC,UAAU,GAAGZ,GAAG,CAACa,OAAJ,CAAYC,qBAAZ,EAAnB;AACD;;AAXyB,GAAD,CAA3B;AAcAZ,EAAAA,OAAO,CAACK,OAAO,CAACP,GAAD,CAAR,CAAP;AAEA,sBACE,QAAC,SAAD;AAAW,IAAA,GAAG,EAAEE,OAAhB;AAAyB,IAAA,UAAU,EAAED,UAArC;AAAA,4BACE;AAAA,gBACGH,IAAI,CAACiB,MAAL,CAAYC,GAAZ,CAAgBC,KAAK,iBACpB,QAAC,KAAD;AAAmB,QAAA,KAAK,EAAEA;AAA1B,SAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,gBAAInB,IAAI,CAACoB;AAAT;AAAA;AAAA;AAAA;AAAA,YAPF,EAQGpB,IAAI,CAACqB,IAAL,iBAAa;AAAK,MAAA,GAAG,EAAErB,IAAI,CAACqB,IAAf;AAAqB,MAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,YARhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAtCuBtB,I;UAGYJ,O,EAOdC,O;;;KAVEG,I","sourcesContent":["import React, { useRef } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { Container, Label } from './styles'\n\nexport default function Card({ data, index }) {\n  const ref = useRef()\n\n  const [{ isDragging }, dragRef] = useDrag({\n    item: { type: 'CARD', index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  })\n\n  const [, dropRef] = useDrop({\n    accept: 'CARD',\n    hover(item, monitor) {\n      const draggedIndex = item.index\n      const targetIndex = index\n\n      if (draggedIndex === targetIndex) {\n        return\n      }\n\n      const targetSize = ref.current.getBoundingClientRect()\n    }\n  })\n\n  dragRef(dropRef(ref))\n\n  return (\n    <Container ref={dragRef} isDragging={isDragging}>\n      <header>\n        {data.labels.map(label => (\n          <Label key={label} color={label} />\n        ))}\n      </header>\n\n      <p>{data.content}</p>\n      {data.user && <img src={data.user} alt=\"\" />}\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}